#\\\\\\\\\\\\\\\/////////////////#
###     Zsh Theme Configuration    ###
#\\\\\\\\\\\\\\\/////////////////#

# -------------------------------
# Set prompt dynamically using precmd
# -------------------------------
precmd() {
  PROMPT="$(build_prompt)"
}

# -------------------------------
# Build Prompt Components
# -------------------------------
CURRENT_BG='NONE'           # Initialize the current background color
SEGMENT_SEPARATOR=''       # Separator between prompt segments

# Define colors for the teal scheme
DARK_TEAL="23"              # ANSI color code for dark teal
TEAL="37"                   # ANSI color code for teal
BLACK="0"                   # ANSI color code for black
WHITE="15"                  # ANSI color code for white
YELLOW="226"                # ANSI color code for yellow
RED="196"                   # ANSI color code for red
CYAN="51"                   # ANSI color code for cyan

# -------------------------------
# Collapse directory path (e.g., ~/D/P/ instead of ~/Documents/Projects/)
# -------------------------------
collapse_pwd() {
  echo $(pwd | sed -e "s,^$HOME,~/STUDIO," | sed "s@\(.\)[^/]*/@\1/@g")
}

# -------------------------------
# Prompt Segment (helper function to handle prompt segments)
# -------------------------------
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# -------------------------------
# End of Prompt Segment (finalize the prompt display)
# -------------------------------
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

# -------------------------------
# Context Information for Prompt (e.g., user or SSH info)
# -------------------------------
prompt_context() {
  local user=$(whoami)
  if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    prompt_segment "$BLACK" "$CYAN" "%(!.%{%F{yellow}%}.)❯"
  fi
}

# -------------------------------
# Git Status (Check for changes in the Git repository)
# -------------------------------
parse_git_dirty() {
  git diff --quiet --ignore-submodules HEAD 2>/dev/null
  [[ $? -ne 0 ]] && echo "±"
}

# -------------------------------
# Git Information for Prompt (show current branch and changes)
# -------------------------------
prompt_git() {
  local ref dirty
  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev | head -n1 2> /dev/null)"
    if [[ -n $dirty ]]; then
      prompt_segment "$YELLOW" "$BLACK" " ${ref/refs\/heads\//} $dirty"
    else
      prompt_segment "$TEAL" "$BLACK" " ${ref/refs\/heads\//}"
    fi
  fi
}

# -------------------------------
# Directory Information for Prompt
# -------------------------------
prompt_dir() {
  prompt_segment "$DARK_TEAL" "$WHITE" "$(collapse_pwd)"
}

# -------------------------------
# Status Information for Prompt (e.g., exit status, root, or background jobs)
# -------------------------------
prompt_status() {
  local symbols
  symbols=()
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{$RED}%}✘"  # Show error symbol if last command failed
  [[ $UID -eq 0 ]] && symbols+="%{%F{$YELLOW}%}⚡"  # Show root symbol if user is root
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{$CYAN}%}⚙"  # Show job symbol if there are background jobs
  [[ -n "$symbols" ]] && prompt_segment "$BLACK" "$TEAL" "$symbols"
}

# -------------------------------
# Build the Final Prompt
# -------------------------------
build_prompt() {
  RETVAL=$?              # Capture the return code of the last command
  prompt_status          # Display status information (errors, root, background jobs)
  prompt_context         # Display context information (user, SSH)
  prompt_dir             # Display directory information
  prompt_git             # Display Git information
  prompt_end             # End the prompt
}
